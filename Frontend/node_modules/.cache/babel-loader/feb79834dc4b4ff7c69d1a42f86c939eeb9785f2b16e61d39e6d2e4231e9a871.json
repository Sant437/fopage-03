{"ast":null,"code":"var _jsxFileName = \"/home/dell/santhosh/react/fopage-01/Frontend/src/component/Chats.tsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import '@fortawesome/fontawesome-free/css/all.min.css';\n// import axios from 'axios';\n// import MessageSystem from './MessageSystem';\n\n// interface Chat {\n//   name: string;\n//   message: string;\n//   time: string;\n//   avatar: string;\n//   status: string;\n// }\n\n// const Chats: React.FC = () => {\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [currentTime, setCurrentTime] = useState('');\n//   const [selectedChat, setSelectedChat] = useState<Chat | null>(null);\n//   const [chatData, setChatData] = useState<Chat[]>([]);\n\n//   const fetchChatData = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5000/api/chats');\n//       setChatData(response.data);\n//     } catch (error) {\n//       console.error('Error fetching chat data:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchChatData();\n//   }, []);\n\n//   useEffect(() => {\n//     const now = new Date();\n//     const options: Intl.DateTimeFormatOptions = {\n//       hour: '2-digit',\n//       minute: '2-digit',\n//       hour12: true,\n//     };\n//     const formattedTime = now.toLocaleTimeString([], options);\n//     setCurrentTime(formattedTime);\n//   }, []);\n\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       fetchChatData(); // Refresh chat data every 30 seconds\n//     }, 30000);\n\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setSearchTerm(e.target.value);\n//   };\n\n//   const handleChatClick = (chat: Chat) => {\n//     setSelectedChat(chat);\n//   };\n\n//   return (\n//     <div className='flex h-screen'>\n//       <div className=\"flex flex-col mx-4 ml-5 w-1/3 h-530 shadow-md\">\n//         {/* Search Bar */}\n//         <div className=\"flex justify-center mb-4 mt-3\">\n//           <input\n//             type=\"text\"\n//             value={searchTerm}\n//             onChange={handleSearchChange}\n//             placeholder=\"Search here\"\n//             className=\"w-[85%] p-2 rounded-lg placeholder:text-xs text-left outline-none\"\n//           />\n//           <i className=\"fa fa-search absolute right-10 top-3 text-gray-400\"></i>\n//         </div>\n\n//         <div className=\"ml-6 z-2 flex flex-col mr-[30%] space-y-0\">\n//           <div className=\"flex gap-2.5 font-work-sans\">\n//             <div className=\"text-green-500\">\n//               <button className=\"bg-none p-2.5 border-b-2 border-green-500 cursor-pointer text-green-500 text-xs\">\n//                 Recent Chats\n//               </button>\n//             </div>\n//             <button className=\"border-none bg-none p-2.5 cursor-pointer text-gray-400 text-xs\">All Chats</button>\n//           </div>\n//           <div className=\"line text-gray-200\">\n//             <hr className=\"m-0 w-[93%]\" />\n//           </div>\n//         </div>\n\n//         {/* Scrollable Chat List */}\n//         <div className=\"flex-1 overflow-y-auto\">\n//           {chatData\n//             .filter((chat) =>\n//               chat.name.toLowerCase().includes(searchTerm.toLowerCase())\n//             )\n//             .map((chat, index) => (\n//               <div\n//                 key={index}\n//                 onClick={() => handleChatClick(chat)}\n//                 className=\"cursor-pointer\"\n//               >\n//                 <div className=\"bg-white p-4 h-16 mt-1 rounded mb-1\">\n//                   <div className='flex flex-row items-center'>\n//                     <div className=\"relative\">\n//                       <img\n//                         className=\"w-8 h-8 ml-2\"\n//                         src={chat.avatar}\n//                         alt=\"Profile\"\n//                       />\n//                     </div>\n//                     <div className='flex flex-col ml-1'>\n//                       <div className='text-xs font-semibold' style={{ color: \"#232323\" }}>\n//                         {chat.name}\n//                       </div>\n//                       <div className='text-xs whitespace-nowrap'>{chat.message}</div>\n//                     </div>\n//                     <div className='text-xs ml-6'>{chat.time}</div>\n//                   </div>\n//                 </div>\n\n//                 <div className=\"line ml-6 text-gray-200\">\n//                   <hr className=\"m-0 w-[93%]\" />\n//                 </div>\n//               </div>\n//             ))}\n//         </div>\n//       </div>\n//       <div className=\"flex-grow h-full\">\n//         <MessageSystem chat={selectedChat} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chats;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\n// Define types for your props\n\n// Define types for message and user\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chats = ({\n  userId,\n  otherUserId\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [otherUser, setOtherUser] = useState(null);\n  const ws = useRef(null);\n  useEffect(() => {\n    // Fetch other user's profile\n    axios.get(`/api/user/${otherUserId}`).then(response => {\n      setOtherUser(response.data);\n    });\n\n    // WebSocket connection\n    ws.current = new WebSocket('ws://localhost:3000');\n    ws.current.onmessage = event => {\n      const newMessage = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    };\n\n    // Clean up WebSocket connection on component unmount\n    return () => {\n      var _ws$current;\n      (_ws$current = ws.current) === null || _ws$current === void 0 ? void 0 : _ws$current.close();\n    };\n  }, [otherUserId]);\n  const sendMessage = () => {\n    var _ws$current2;\n    if (message.trim() === '') return;\n    const messageObject = {\n      sender_id: userId,\n      receiver_id: otherUserId,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n\n    // Send message via WebSocket\n    (_ws$current2 = ws.current) === null || _ws$current2 === void 0 ? void 0 : _ws$current2.send(JSON.stringify(messageObject));\n\n    // Optionally, save the message in the backend\n    axios.post('/api/messages', messageObject).then(response => {}).catch(error => console.error('Error sending message:', error));\n    setMessage('');\n  };\n  const handleDeleteMessage = messageId => {\n    axios.delete(`/api/messages/${messageId}`).then(response => setMessages(messages.filter(msg => msg.id !== messageId))).catch(error => console.error('Error deleting message:', error));\n  };\n  const handleClearHistory = () => {\n    axios.delete('/api/messages/clear', {\n      data: {\n        user1: userId,\n        user2: otherUserId\n      }\n    }).then(response => setMessages([])).catch(error => console.error('Error clearing chat history:', error));\n  };\n  const handleForwardMessage = messageId => {\n    const newReceiverId = prompt('Enter the ID of the user to forward this message to:');\n    if (newReceiverId) {\n      axios.post('/api/messages/forward', {\n        originalMessageId: messageId,\n        newReceiverId,\n        senderId: userId\n      }).then(response => {}).catch(error => console.error('Error forwarding message:', error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [otherUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-profile\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: otherUser.profile_picture,\n        alt: `${otherUser.username}'s profile`,\n        className: \"profile-picture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: otherUser.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-container\",\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender_id === userId ? 'sent' : 'received'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: new Date(msg.timestamp).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 1\n        }, this), msg.sender_id === userId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete-button\",\n            onClick: () => handleDeleteMessage(msg.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"forward-button\",\n            onClick: () => handleForwardMessage(msg.id),\n            children: \"Forward\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 1\n        }, this)]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 1\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear-history-button\",\n        onClick: handleClearHistory,\n        children: \"Clear History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 1\n  }, this);\n};\n_s(Chats, \"GQni+CpTeZzvOdZEWfLTE8x0zbI=\");\n_c = Chats;\nexport default Chats;\nvar _c;\n$RefreshReg$(_c, \"Chats\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Chats","userId","otherUserId","_s","messages","setMessages","message","setMessage","otherUser","setOtherUser","ws","get","then","response","data","current","WebSocket","onmessage","event","newMessage","JSON","parse","prevMessages","_ws$current","close","sendMessage","_ws$current2","trim","messageObject","sender_id","receiver_id","content","timestamp","Date","toISOString","send","stringify","post","catch","error","console","handleDeleteMessage","messageId","delete","filter","msg","id","handleClearHistory","user1","user2","handleForwardMessage","newReceiverId","prompt","originalMessageId","senderId","className","children","src","profile_picture","alt","username","fileName","_jsxFileName","lineNumber","columnNumber","map","toLocaleString","onClick","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/home/dell/santhosh/react/fopage-01/Frontend/src/component/Chats.tsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import '@fortawesome/fontawesome-free/css/all.min.css';\n// import axios from 'axios';\n// import MessageSystem from './MessageSystem';\n\n// interface Chat {\n//   name: string;\n//   message: string;\n//   time: string;\n//   avatar: string;\n//   status: string;\n// }\n\n// const Chats: React.FC = () => {\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [currentTime, setCurrentTime] = useState('');\n//   const [selectedChat, setSelectedChat] = useState<Chat | null>(null);\n//   const [chatData, setChatData] = useState<Chat[]>([]);\n\n//   const fetchChatData = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5000/api/chats');\n//       setChatData(response.data);\n//     } catch (error) {\n//       console.error('Error fetching chat data:', error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchChatData();\n//   }, []);\n\n//   useEffect(() => {\n//     const now = new Date();\n//     const options: Intl.DateTimeFormatOptions = {\n//       hour: '2-digit',\n//       minute: '2-digit',\n//       hour12: true,\n//     };\n//     const formattedTime = now.toLocaleTimeString([], options);\n//     setCurrentTime(formattedTime);\n//   }, []);\n\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       fetchChatData(); // Refresh chat data every 30 seconds\n//     }, 30000);\n\n//     return () => clearInterval(interval);\n//   }, []);\n\n//   const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setSearchTerm(e.target.value);\n//   };\n\n//   const handleChatClick = (chat: Chat) => {\n//     setSelectedChat(chat);\n//   };\n\n//   return (\n//     <div className='flex h-screen'>\n//       <div className=\"flex flex-col mx-4 ml-5 w-1/3 h-530 shadow-md\">\n//         {/* Search Bar */}\n//         <div className=\"flex justify-center mb-4 mt-3\">\n//           <input\n//             type=\"text\"\n//             value={searchTerm}\n//             onChange={handleSearchChange}\n//             placeholder=\"Search here\"\n//             className=\"w-[85%] p-2 rounded-lg placeholder:text-xs text-left outline-none\"\n//           />\n//           <i className=\"fa fa-search absolute right-10 top-3 text-gray-400\"></i>\n//         </div>\n\n//         <div className=\"ml-6 z-2 flex flex-col mr-[30%] space-y-0\">\n//           <div className=\"flex gap-2.5 font-work-sans\">\n//             <div className=\"text-green-500\">\n//               <button className=\"bg-none p-2.5 border-b-2 border-green-500 cursor-pointer text-green-500 text-xs\">\n//                 Recent Chats\n//               </button>\n//             </div>\n//             <button className=\"border-none bg-none p-2.5 cursor-pointer text-gray-400 text-xs\">All Chats</button>\n//           </div>\n//           <div className=\"line text-gray-200\">\n//             <hr className=\"m-0 w-[93%]\" />\n//           </div>\n//         </div>\n\n//         {/* Scrollable Chat List */}\n//         <div className=\"flex-1 overflow-y-auto\">\n//           {chatData\n//             .filter((chat) =>\n//               chat.name.toLowerCase().includes(searchTerm.toLowerCase())\n//             )\n//             .map((chat, index) => (\n//               <div\n//                 key={index}\n//                 onClick={() => handleChatClick(chat)}\n//                 className=\"cursor-pointer\"\n//               >\n//                 <div className=\"bg-white p-4 h-16 mt-1 rounded mb-1\">\n//                   <div className='flex flex-row items-center'>\n//                     <div className=\"relative\">\n//                       <img\n//                         className=\"w-8 h-8 ml-2\"\n//                         src={chat.avatar}\n//                         alt=\"Profile\"\n//                       />\n//                     </div>\n//                     <div className='flex flex-col ml-1'>\n//                       <div className='text-xs font-semibold' style={{ color: \"#232323\" }}>\n//                         {chat.name}\n//                       </div>\n//                       <div className='text-xs whitespace-nowrap'>{chat.message}</div>\n//                     </div>\n//                     <div className='text-xs ml-6'>{chat.time}</div>\n//                   </div>\n//                 </div>\n\n//                 <div className=\"line ml-6 text-gray-200\">\n//                   <hr className=\"m-0 w-[93%]\" />\n//                 </div>\n//               </div>\n//             ))}\n//         </div>\n//       </div>\n//       <div className=\"flex-grow h-full\">\n//         <MessageSystem chat={selectedChat} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chats;\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n \n// Define types for your props\ninterface ChatProps {\n  userId: number;\n  otherUserId: number;\n}\n \n// Define types for message and user\ninterface Message {\n  id: number;\n  sender_id: number;\n  receiver_id: number;\n  content: string;\n  timestamp: string;\n}\n \ninterface User {\n  id: number;\n  username: string;\n  profile_picture: string;\n}\n \nconst Chats: React.FC<ChatProps> = ({ userId, otherUserId }) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [message, setMessage] = useState<string>('');\n  const [otherUser, setOtherUser] = useState<User | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n \n  useEffect(() => {\n    // Fetch other user's profile\n    axios.get<User>(`/api/user/${otherUserId}`).then(response => {\n      setOtherUser(response.data);\n    });\n \n    // WebSocket connection\n    ws.current = new WebSocket('ws://localhost:3000');\n    ws.current.onmessage = (event) => {\n      const newMessage: Message = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    };\n \n    // Clean up WebSocket connection on component unmount\n    return () => {\n      ws.current?.close();\n    };\n  }, [otherUserId]);\n \n  const sendMessage = () => {\n    if (message.trim() === '') return;\n \n    const messageObject: Omit<Message, 'id'> = {\n      sender_id: userId,\n      receiver_id: otherUserId,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n \n    // Send message via WebSocket\n    ws.current?.send(JSON.stringify(messageObject));\n \n    // Optionally, save the message in the backend\n    axios.post('/api/messages', messageObject)\n      .then(response => {})\n      .catch(error => console.error('Error sending message:', error));\n \n    setMessage('');\n  };\n \n  const handleDeleteMessage = (messageId: number) => {\n    axios.delete(`/api/messages/${messageId}`)\n      .then(response => setMessages(messages.filter(msg => msg.id !== messageId)))\n      .catch(error => console.error('Error deleting message:', error));\n  };\n \n  const handleClearHistory = () => {\n    axios.delete('/api/messages/clear', { data: { user1: userId, user2: otherUserId } })\n      .then(response => setMessages([]))\n      .catch(error => console.error('Error clearing chat history:', error));\n  };\n \n  const handleForwardMessage = (messageId: number) => {\n    const newReceiverId = prompt('Enter the ID of the user to forward this message to:');\n    if (newReceiverId) {\n      axios.post('/api/messages/forward', { originalMessageId: messageId, newReceiverId, senderId: userId })\n        .then(response => {})\n        .catch(error => console.error('Error forwarding message:', error));\n    }\n  };\n \n  return (\n<div className=\"chat-container\">\n      {otherUser && (\n<div className=\"user-profile\">\n<img src={otherUser.profile_picture} alt={`${otherUser.username}'s profile`} className=\"profile-picture\" />\n<h1>{otherUser.username}</h1>\n</div>\n      )}\n<div className=\"message-container\">\n        {messages.map(msg => (\n<div key={msg.id} className={`message ${msg.sender_id === userId ? 'sent' : 'received'}`}>\n<p>{msg.content}</p>\n<small>{new Date(msg.timestamp).toLocaleString()}</small>\n            {msg.sender_id === userId && (\n<div className=\"message-actions\">\n<button className=\"delete-button\" onClick={() => handleDeleteMessage(msg.id)}>Delete</button>\n<button className=\"forward-button\" onClick={() => handleForwardMessage(msg.id)}>Forward</button>\n</div>\n            )}\n</div>\n        ))}\n</div>\n<div className=\"message-input\">\n<input\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"Type your message\"\n          className=\"input-field\"\n        />\n<button className=\"send-button\" onClick={sendMessage}>Send</button>\n<button className=\"clear-history-button\" onClick={handleClearHistory}>Clear History</button>\n</div>\n</div>\n  );\n};\n \nexport default Chats;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}