{"ast":null,"code":"// import React, { useState, useEffect, useRef, KeyboardEvent } from 'react';\n// import { IoPersonCircleSharp } from \"react-icons/io5\";\n// import { io, Socket } from 'socket.io-client'; // Import Socket.IO client\n\n// interface Chat {\n//   name: string;\n//   avatar: string;\n//   status: string;\n//   mobileNumber: string;\n// }\n\n// interface Message {\n//   sender_mobile: string;\n//   receiver_mobile: string;\n//   sender_name: string;\n//   receiver_name: string;\n//   message: string;\n//   time: string;\n// }\n\n// interface MessageSystemProps {\n//   chat: Chat | null;\n//   currentUserMobile: string;\n// }\n\n// const MessageSystem: React.FC<MessageSystemProps> = ({ chat, currentUserMobile }) => {\n//   const [messageInput, setMessageInput] = useState('');\n//   const [messages, setMessages] = useState<Message[]>([]);\n//   const [file, setFile] = useState<File | null>(null);\n//   const socketRef = useRef<Socket | null>(null);\n\n//   useEffect(() => {\n//     if (chat) {\n//       const fetchMessages = async () => {\n//         try {\n//           const response = await fetch(`/api/messages?sender_mobile=${currentUserMobile}&receiver_mobile=${chat.mobileNumber}`);\n//           const data = await response.json();\n//           setMessages(data);\n//         } catch (error) {\n//           console.error('Error fetching messages:', error);\n//         }\n//       };\n\n//       fetchMessages();\n//     }\n//   }, [chat, currentUserMobile]);\n\n//   useEffect(() => {\n//     if (chat) {\n//       // Initialize WebSocket connection\n//       socketRef.current = io('http://localhost:5000'); // Replace with your backend WebSocket URL\n\n//       // Listen for incoming messages\n//       socketRef.current.on('receiveMessage', (newMessage: Message) => {\n//         setMessages(prevMessages => [...prevMessages, newMessage]);\n//       });\n\n//       return () => {\n//         socketRef.current?.disconnect();\n//       };\n//     }\n//   }, [chat]);\n\n//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setMessageInput(e.target.value);\n//   };\n\n//   const handleSendMessage = async () => {\n//     if (messageInput.trim()) {\n//       const now = new Date();\n//       const options: Intl.DateTimeFormatOptions = {\n//         hour: '2-digit',\n//         minute: '2-digit',\n//         second: '2-digit',       // Include seconds in the formatted time\n//         hour12: true,            // Use 12-hour format with AM/PM\n//         timeZone: 'Asia/Kolkata' // Set the time zone to IST (Indian Standard Time)\n//       };\n//       const formattedTime = now.toLocaleTimeString('en-US', options);\n\n//       const newMessage: Message = {\n//         sender_mobile: currentUserMobile,\n//         receiver_mobile: chat?.mobileNumber || '',\n//         sender_name: 'vinoth', // Replace with actual sender name\n//         receiver_name: chat?.name || 'User',\n//         message: messageInput,\n//         time: formattedTime,\n//       };\n\n//       try {\n//         // Send message through WebSocket\n//         socketRef.current?.emit('sendMessage', newMessage);\n\n//         // Optionally, also save the message in the backend\n//         await fetch('/api/messages', {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(newMessage),\n//         });\n\n//         setMessages([...messages, newMessage]);\n//         setMessageInput('');\n//       } catch (error) {\n//         console.error('Error sending message:', error);\n//       }\n//     }\n//   };\n\n//   const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const selectedFile = e.target.files ? e.target.files[0] : null;\n//     if (selectedFile) {\n//       const now = new Date();\n//       const options: Intl.DateTimeFormatOptions = {\n//         hour: '2-digit',\n//         minute: '2-digit',\n//         hour12: true,\n//       };\n//       const formattedTime = now.toLocaleTimeString([], options);\n\n//       const newMessage: Message = {\n//         sender_mobile: currentUserMobile,\n//         receiver_mobile: chat?.mobileNumber || '',\n//         sender_name: chat?.name || 'User', // Replace with actual sender name\n//         receiver_name: 'vinoth',\n//         message: `Sent a file: ${selectedFile.name}`,\n//         time: formattedTime,\n//       };\n\n//       try {\n//         // Send file message through WebSocket\n//         socketRef.current?.emit('sendMessage', newMessage);\n\n//         // Optionally, also save the message in the backend\n//         await fetch('/api/messages', {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(newMessage),\n//         });\n\n//         setMessages([...messages, newMessage]);\n//         setFile(null);\n//       } catch (error) {\n//         console.error('Error sending file message:', error);\n//       }\n//     }\n//   };\n\n//   const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n//     if (e.key === 'Enter') {\n//       e.preventDefault();\n//       handleSendMessage();\n//     }\n//   };\n\n//   if (!chat) {\n//     return (\n//       <div className=\"flex-grow mb-4 p-4 ml-64 mt-20 flex flex-col h-[calc(100vh-5rem)]\">\n//         <div className=\"flex justify-between items-center mb-4\">\n//           <div className=\"text-xl font-[600] mb-5 text-[#232323] flex items-center space-x-2\">\n//             <span>Select a chat to see messages.</span>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   messages.map((re)=>{\n//     console.log(\"currentUserMobile\",re.receiver_mobile,currentUserMobile);\n//   })\n\n//   return (\n//     <div className=\"flex-grow mb-4 flex flex-col h-[calc(100vh-5rem)]\">\n//       {/* Header with chat information */}\n//       <div className=\"flex justify-between items-center mb-4\">\n//         <div className=\"text-xl font-[700] text-[#232323] flex items-center space-x-2\">\n//           <IoPersonCircleSharp className='w-14 h-14 ml-7 mt-3' />\n//           <div>\n//             <span className='font-medium'>{chat.name}</span>\n//             <div className={`text-xs ${chat.status === 'Online' ? 'text-green-500' : 'text-gray-500'}`}>\n//               {chat.status}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Message area */}\n//       <div className=\"flex flex-col flex-grow overflow-y-auto bg-[#f6f6f8] p-4\">\n//         {/* Display messages */}\n//         {messages.map((msg, index) => (\n//           <div key={index} className={`flex w-full ${msg.sender_mobile === currentUserMobile ? 'justify-end' : 'justify-start'} mb-4`}>   \n//             {msg.sender_mobile !== currentUserMobile && <img src={chat.avatar || '/assets/default_avatar.png'} alt={msg.sender_name} className=\"w-10 h-10 rounded-full mr-2\" />}\n//             <div className={`flex flex-col ${msg.sender_mobile === currentUserMobile ? 'items-end' : 'items-start'}`}>\n//               <p className=\"bg-white p-2 w-[490px] text-xs rounded-lg shadow-md\">\n//                 {msg.message}\n//                 <span className=\"text-xs text-gray-500 float-right\" style={{ position: 'relative', top: '-5px', marginRight: '10px' }}>\n//                   {msg.time}\n\n//                 </span>\n//               </p>\n//             </div>\n//             {msg.sender_mobile === currentUserMobile && <img src={chat.avatar || '/assets/default_avatar.png'} alt={msg.sender_name} className=\"w-8 h-8 rounded-full ml-2\" />}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Input area */}\n//       <div className=\"flex items-center mb-4 p-4 border-t bg-[#ffffff] shadow-md\">\n//         <input\n//           type=\"file\"\n//           id=\"file-input\"\n//           className=\"hidden\"\n//           onChange={handleFileChange}\n//         />\n//         <label htmlFor=\"file-input\">\n//           <img className=\"p-2 mr-2 bg-white w-10 h-10 cursor-pointer\" src=\"/assets/add.svg\" alt=\"Add\" />\n//         </label>\n//         <input\n//           type=\"text\"\n//           value={messageInput}\n//           onChange={handleInputChange}\n//           placeholder=\"Type Here\"\n//           onKeyDown={handleKeyDown}\n//           className=\"text-xs font-medium text-gray-400 flex-grow p-2 border rounded-lg outline-none\"\n//         />\n//         <img\n//           onClick={handleSendMessage}\n//           className=\"p-2 bg-white w-14 h-14 cursor-pointer\"\n//           src=\"/assets/sendbutton.svg\"\n//           alt=\"Send\"\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default MessageSystem;","map":{"version":3,"names":[],"sources":["/home/dell/santhosh/react/fopage-01/Frontend/src/component/MessageSystem.tsx"],"sourcesContent":["// import React, { useState, useEffect, useRef, KeyboardEvent } from 'react';\n// import { IoPersonCircleSharp } from \"react-icons/io5\";\n// import { io, Socket } from 'socket.io-client'; // Import Socket.IO client\n\n// interface Chat {\n//   name: string;\n//   avatar: string;\n//   status: string;\n//   mobileNumber: string;\n// }\n\n// interface Message {\n//   sender_mobile: string;\n//   receiver_mobile: string;\n//   sender_name: string;\n//   receiver_name: string;\n//   message: string;\n//   time: string;\n// }\n\n// interface MessageSystemProps {\n//   chat: Chat | null;\n//   currentUserMobile: string;\n// }\n\n// const MessageSystem: React.FC<MessageSystemProps> = ({ chat, currentUserMobile }) => {\n//   const [messageInput, setMessageInput] = useState('');\n//   const [messages, setMessages] = useState<Message[]>([]);\n//   const [file, setFile] = useState<File | null>(null);\n//   const socketRef = useRef<Socket | null>(null);\n\n//   useEffect(() => {\n//     if (chat) {\n//       const fetchMessages = async () => {\n//         try {\n//           const response = await fetch(`/api/messages?sender_mobile=${currentUserMobile}&receiver_mobile=${chat.mobileNumber}`);\n//           const data = await response.json();\n//           setMessages(data);\n//         } catch (error) {\n//           console.error('Error fetching messages:', error);\n//         }\n//       };\n\n//       fetchMessages();\n//     }\n//   }, [chat, currentUserMobile]);\n\n//   useEffect(() => {\n//     if (chat) {\n//       // Initialize WebSocket connection\n//       socketRef.current = io('http://localhost:5000'); // Replace with your backend WebSocket URL\n\n//       // Listen for incoming messages\n//       socketRef.current.on('receiveMessage', (newMessage: Message) => {\n//         setMessages(prevMessages => [...prevMessages, newMessage]);\n//       });\n\n//       return () => {\n//         socketRef.current?.disconnect();\n//       };\n//     }\n//   }, [chat]);\n\n//   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     setMessageInput(e.target.value);\n//   };\n\n//   const handleSendMessage = async () => {\n//     if (messageInput.trim()) {\n//       const now = new Date();\n//       const options: Intl.DateTimeFormatOptions = {\n//         hour: '2-digit',\n//         minute: '2-digit',\n//         second: '2-digit',       // Include seconds in the formatted time\n//         hour12: true,            // Use 12-hour format with AM/PM\n//         timeZone: 'Asia/Kolkata' // Set the time zone to IST (Indian Standard Time)\n//       };\n//       const formattedTime = now.toLocaleTimeString('en-US', options);\n      \n//       const newMessage: Message = {\n//         sender_mobile: currentUserMobile,\n//         receiver_mobile: chat?.mobileNumber || '',\n//         sender_name: 'vinoth', // Replace with actual sender name\n//         receiver_name: chat?.name || 'User',\n//         message: messageInput,\n//         time: formattedTime,\n//       };\n\n//       try {\n//         // Send message through WebSocket\n//         socketRef.current?.emit('sendMessage', newMessage);\n\n//         // Optionally, also save the message in the backend\n//         await fetch('/api/messages', {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(newMessage),\n//         });\n\n//         setMessages([...messages, newMessage]);\n//         setMessageInput('');\n//       } catch (error) {\n//         console.error('Error sending message:', error);\n//       }\n//     }\n//   };\n\n//   const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const selectedFile = e.target.files ? e.target.files[0] : null;\n//     if (selectedFile) {\n//       const now = new Date();\n//       const options: Intl.DateTimeFormatOptions = {\n//         hour: '2-digit',\n//         minute: '2-digit',\n//         hour12: true,\n//       };\n//       const formattedTime = now.toLocaleTimeString([], options);\n\n//       const newMessage: Message = {\n//         sender_mobile: currentUserMobile,\n//         receiver_mobile: chat?.mobileNumber || '',\n//         sender_name: chat?.name || 'User', // Replace with actual sender name\n//         receiver_name: 'vinoth',\n//         message: `Sent a file: ${selectedFile.name}`,\n//         time: formattedTime,\n//       };\n\n//       try {\n//         // Send file message through WebSocket\n//         socketRef.current?.emit('sendMessage', newMessage);\n\n//         // Optionally, also save the message in the backend\n//         await fetch('/api/messages', {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(newMessage),\n//         });\n\n//         setMessages([...messages, newMessage]);\n//         setFile(null);\n//       } catch (error) {\n//         console.error('Error sending file message:', error);\n//       }\n//     }\n//   };\n\n//   const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n//     if (e.key === 'Enter') {\n//       e.preventDefault();\n//       handleSendMessage();\n//     }\n//   };\n\n//   if (!chat) {\n//     return (\n//       <div className=\"flex-grow mb-4 p-4 ml-64 mt-20 flex flex-col h-[calc(100vh-5rem)]\">\n//         <div className=\"flex justify-between items-center mb-4\">\n//           <div className=\"text-xl font-[600] mb-5 text-[#232323] flex items-center space-x-2\">\n//             <span>Select a chat to see messages.</span>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   messages.map((re)=>{\n//     console.log(\"currentUserMobile\",re.receiver_mobile,currentUserMobile);\n//   })\n\n//   return (\n//     <div className=\"flex-grow mb-4 flex flex-col h-[calc(100vh-5rem)]\">\n//       {/* Header with chat information */}\n//       <div className=\"flex justify-between items-center mb-4\">\n//         <div className=\"text-xl font-[700] text-[#232323] flex items-center space-x-2\">\n//           <IoPersonCircleSharp className='w-14 h-14 ml-7 mt-3' />\n//           <div>\n//             <span className='font-medium'>{chat.name}</span>\n//             <div className={`text-xs ${chat.status === 'Online' ? 'text-green-500' : 'text-gray-500'}`}>\n//               {chat.status}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Message area */}\n//       <div className=\"flex flex-col flex-grow overflow-y-auto bg-[#f6f6f8] p-4\">\n//         {/* Display messages */}\n//         {messages.map((msg, index) => (\n//           <div key={index} className={`flex w-full ${msg.sender_mobile === currentUserMobile ? 'justify-end' : 'justify-start'} mb-4`}>   \n//             {msg.sender_mobile !== currentUserMobile && <img src={chat.avatar || '/assets/default_avatar.png'} alt={msg.sender_name} className=\"w-10 h-10 rounded-full mr-2\" />}\n//             <div className={`flex flex-col ${msg.sender_mobile === currentUserMobile ? 'items-end' : 'items-start'}`}>\n//               <p className=\"bg-white p-2 w-[490px] text-xs rounded-lg shadow-md\">\n//                 {msg.message}\n//                 <span className=\"text-xs text-gray-500 float-right\" style={{ position: 'relative', top: '-5px', marginRight: '10px' }}>\n//                   {msg.time}\n\n//                 </span>\n//               </p>\n//             </div>\n//             {msg.sender_mobile === currentUserMobile && <img src={chat.avatar || '/assets/default_avatar.png'} alt={msg.sender_name} className=\"w-8 h-8 rounded-full ml-2\" />}\n//           </div>\n//         ))}\n//       </div>\n      \n//       {/* Input area */}\n//       <div className=\"flex items-center mb-4 p-4 border-t bg-[#ffffff] shadow-md\">\n//         <input\n//           type=\"file\"\n//           id=\"file-input\"\n//           className=\"hidden\"\n//           onChange={handleFileChange}\n//         />\n//         <label htmlFor=\"file-input\">\n//           <img className=\"p-2 mr-2 bg-white w-10 h-10 cursor-pointer\" src=\"/assets/add.svg\" alt=\"Add\" />\n//         </label>\n//         <input\n//           type=\"text\"\n//           value={messageInput}\n//           onChange={handleInputChange}\n//           placeholder=\"Type Here\"\n//           onKeyDown={handleKeyDown}\n//           className=\"text-xs font-medium text-gray-400 flex-grow p-2 border rounded-lg outline-none\"\n//         />\n//         <img\n//           onClick={handleSendMessage}\n//           className=\"p-2 bg-white w-14 h-14 cursor-pointer\"\n//           src=\"/assets/sendbutton.svg\"\n//           alt=\"Send\"\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default MessageSystem;\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}